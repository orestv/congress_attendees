//@ sourceMappingURL=attendee.map
// Generated by CoffeeScript 1.6.1
(function() {
  var AttendeeEditor,
    _this = this;

  AttendeeEditor = (function() {
    var firstInputId;

    AttendeeEditor.prototype.fields = {
      'txtFirstname': 'firstname',
      'txtLastname': 'lastname',
      'txtMiddlename': 'middlename',
      'txtCity': 'city',
      'txtPhone': 'personal_phone',
      'txtPosition': 'position',
      'txtOrganization': 'organization'
    };

    firstInputId = 'txtLastname';

    AttendeeEditor.attendeeFetched = false;

    AttendeeEditor.eventsFetched = false;

    function AttendeeEditor(attendeeId) {
      var _this = this;
      this.attendeeId = attendeeId;
      this.joinEventData = function() {
        return AttendeeEditor.prototype.joinEventData.apply(_this, arguments);
      };
      this.btnCancel_clicked = function(event) {
        return AttendeeEditor.prototype.btnCancel_clicked.apply(_this, arguments);
      };
      this.btnBook_clicked = function(event) {
        return AttendeeEditor.prototype.btnBook_clicked.apply(_this, arguments);
      };
      this.updateEventFreePlaces = function(eventId) {
        return AttendeeEditor.prototype.updateEventFreePlaces.apply(_this, arguments);
      };
      this.unbookEvent = function(evt) {
        return AttendeeEditor.prototype.unbookEvent.apply(_this, arguments);
      };
      this.bookEvent = function(evt) {
        return AttendeeEditor.prototype.bookEvent.apply(_this, arguments);
      };
      this.fillEventActions = function(evt) {
        return AttendeeEditor.prototype.fillEventActions.apply(_this, arguments);
      };
      this.fillEventsActions = function() {
        return AttendeeEditor.prototype.fillEventsActions.apply(_this, arguments);
      };
      this.fetchEvents = function() {
        return AttendeeEditor.prototype.fetchEvents.apply(_this, arguments);
      };
      this.fetchEventFreePlaces = function() {
        return AttendeeEditor.prototype.fetchEventFreePlaces.apply(_this, arguments);
      };
      this.createAttendee = function() {
        return AttendeeEditor.prototype.createAttendee.apply(_this, arguments);
      };
      this.fetchAttendee = function() {
        return AttendeeEditor.prototype.fetchAttendee.apply(_this, arguments);
      };
      this.tbEvents = Sizzle('#tbEvents')[0];
      this.fetchEventFreePlaces();
      if (this.attendeeId != null) {
        this.fetchAttendee();
      } else {
        this.createAttendee();
      }
      this.fetchEvents();
    }

    AttendeeEditor.prototype.fetchAttendee = function() {
      var request,
        _this = this;
      request = new XMLHttpRequest();
      request.onreadystatechange = function() {
        var response;
        if (request.readyState === 4) {
          response = JSON.parse(request.responseText);
          _this.attendee = response.attendee;
          console.log(_this.attendee);
          _this.attendeeFetched = true;
          setTimeout(_this.fillEventsActions, 1);
          return setTimeout((function() {
            return _this.fillAttendeeDetails(_this.attendee, 1);
          }));
        }
      };
      request.open('GET', "/attendees?id=" + this.attendeeId, true);
      return request.send(null);
    };

    AttendeeEditor.prototype.createAttendee = function() {
      this.attendeeFetched = true;
      return setTimeout(this.fillEventsActions, 1);
    };

    AttendeeEditor.prototype.fetchEventFreePlaces = function() {
      var request,
        _this = this;
      request = new XMLHttpRequest();
      request.onreadystatechange = function() {
        var events, response;
        if (request.readyState === 4) {
          response = JSON.parse(request.responseText);
          events = response.events;
          return _this.fillEventsFreePlaces(events);
        }
      };
      request.open('GET', '/events?type=free_places', true);
      return request.send(null);
    };

    AttendeeEditor.prototype.fetchEvents = function() {
      var request,
        _this = this;
      request = new XMLHttpRequest();
      request.onreadystatechange = function() {
        var response;
        if (request.readyState === 4) {
          response = JSON.parse(request.responseText);
          _this.events = response.events;
          _this.eventsFetched = true;
          return setTimeout(_this.fillEventsActions, 1);
        }
      };
      request.open('GET', '/events', true);
      return request.send(null);
    };

    AttendeeEditor.prototype.fillAttendeeDetails = function(attendee) {
      var input, inputId, objectKey, _ref, _results;
      _ref = this.fields;
      _results = [];
      for (inputId in _ref) {
        objectKey = _ref[inputId];
        input = document.getElementById(inputId);
        if ((input != null) && (this.attendee[objectKey] != null)) {
          _results.push(input.value = this.attendee[objectKey]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    AttendeeEditor.prototype.fillEventsFreePlaces = function(events) {
      var evt, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        evt = events[_i];
        _results.push(this.fillEventFreePlaces(evt));
      }
      return _results;
    };

    AttendeeEditor.prototype.fillEventFreePlaces = function(evt) {
      var span;
      this.getEventElement('spNoLimit', evt).style.display = 'none';
      this.getEventElement('spFreePlaces', evt).style.display = 'none';
      this.getEventElement('spNoFreePlaces', evt).style.display = 'none';
      if (evt.free_places == null) {
        span = this.getEventElement('spNoLimit', evt);
      } else {
        if (evt.free_places > 0) {
          span = this.getEventElement('spFreePlaces', evt);
          span.textContent = evt.free_places;
        } else {
          span = this.getEventElement('spNoFreePlaces', evt);
        }
      }
      return span.style.display = 'block';
    };

    AttendeeEditor.prototype.fillEventsActions = function() {
      var evt, _i, _len, _ref, _results;
      if (!this.attendeeFetched || !this.eventsFetched) {
        console.log('Attendee fetched: #{@attendeeFetched}, events fetched: #{@eventsFetched}');
        return;
      }
      this.joinEventData();
      console.log('Filling event actions');
      _ref = this.events;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        evt = _ref[_i];
        _results.push(this.fillEventActions(evt));
      }
      return _results;
    };

    AttendeeEditor.prototype.fillEventActions = function(evt) {
      var btnBook, btnCancel, item, spBooked, spPaid, _i, _len, _ref;
      if (evt.limit != null) {
        btnCancel = this.getEventElement('btnCancel', evt);
        btnBook = this.getEventElement('btnBook', evt);
        spBooked = this.getEventElement('spBooked', evt);
        spPaid = this.getEventElement('spPaid', evt);
        btnBook.onclick = this.btnBook_clicked;
        btnCancel.onclick = this.btnCancel_clicked;
        _ref = [btnCancel, btnBook, spBooked, spPaid];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          item.style.display = 'none';
        }
        if (evt['booked'] || evt['checked']) {
          btnCancel.style.display = 'inline';
          if (evt['booked']) {
            return spBooked.style.display = 'inline';
          } else {
            return spPaid.style.display = 'inline';
          }
        } else {
          return btnBook.style.display = 'inline';
        }
      }
    };

    AttendeeEditor.prototype.bookEvent = function(evt) {
      var data, loader, request,
        _this = this;
      loader = this.getEventElement('imgLoader', evt);
      this.getEventElement('btnBook', evt).style.display = 'none';
      loader.style.display = 'inline';
      request = new XMLHttpRequest();
      request.onreadystatechange = function() {
        var response;
        if (request.readyState !== 4) {
          return;
        }
        loader.style.display = 'none';
        response = JSON.parse(request.responseText);
        if (response['success']) {
          _this.getEventElement('spBooked', evt).style.display = 'inline';
          _this.getEventElement('btnCancel', evt).style.display = 'inline';
        } else {
          alert('Error!');
          console.log(response.error);
        }
        return _this.updateEventFreePlaces(evt._id);
      };
      request.open('PUT', '/attendee_event', true);
      request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      data = "eid=" + evt._id + "&aid=" + this.attendeeId;
      return request.send(data);
    };

    AttendeeEditor.prototype.unbookEvent = function(evt) {
      var data, loader, request,
        _this = this;
      loader = this.getEventElement('imgLoader', evt);
      this.getEventElement('btnCancel', evt).style.display = 'none';
      this.getEventElement('spBooked', evt).style.display = 'none';
      loader.style.display = 'inline';
      request = new XMLHttpRequest();
      request.onreadystatechange = function() {
        if (request.readyState !== 4) {
          return;
        }
        delete evt.checked;
        delete evt.booked;
        _this.fillEventActions(evt);
        _this.updateEventFreePlaces(evt._id);
        return loader.style.display = 'none';
      };
      request.open('DELETE', '/attendee_event');
      request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
      data = "eid=" + evt._id + "&aid=" + this.attendeeId;
      return request.send(data);
    };

    AttendeeEditor.prototype.updateEventFreePlaces = function(eventId) {
      var rqUEFP,
        _this = this;
      rqUEFP = new XMLHttpRequest();
      rqUEFP.onreadystatechange = function() {
        var current_evt, response;
        if (rqUEFP.readyState !== 4) {
          return;
        }
        response = JSON.parse(rqUEFP.responseText);
        current_evt = response.event;
        return _this.fillEventFreePlaces(current_evt);
      };
      rqUEFP.open('GET', "/events?type=free_places&id=" + eventId, true);
      return rqUEFP.send(null);
    };

    AttendeeEditor.prototype.btnBook_clicked = function(event) {
      var btnBook, e, eventId, evt, _i, _len, _ref;
      btnBook = event.target;
      eventId = this.getEventIdFromEvent(event);
      evt = null;
      _ref = this.events;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e['_id'] === eventId) {
          evt = e;
        }
      }
      return this.bookEvent(evt);
    };

    AttendeeEditor.prototype.btnCancel_clicked = function(event) {
      var btnCancel, e, eventId, evt, _i, _len, _ref;
      btnCancel = event.target;
      eventId = this.getEventIdFromEvent(event);
      _ref = this.events;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        if (e['_id'] === eventId) {
          evt = e;
        }
      }
      if (confirm("Ви впевнені, що бажаєте відмінити реєстрацію на '" + evt.caption + "'?")) {
        return this.unbookEvent(evt);
      }
    };

    AttendeeEditor.prototype.joinEventData = function() {
      var a_evt, attr, evt, _i, _len, _ref, _results;
      _ref = this.attendee['attended_events'];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        a_evt = _ref[_i];
        _results.push((function() {
          var _j, _len1, _ref1, _results1;
          _ref1 = this.events;
          _results1 = [];
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            evt = _ref1[_j];
            if (evt['_id'] === a_evt['_id']) {
              _results1.push((function() {
                var _k, _len2, _ref2, _results2;
                _ref2 = ['booked', 'checked'];
                _results2 = [];
                for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                  attr = _ref2[_k];
                  _results2.push(evt[attr] = a_evt[attr]);
                }
                return _results2;
              })());
            }
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    AttendeeEditor.prototype.getEventElement = function(name, evt) {
      return Sizzle("[eventId=" + evt._id + "][name=" + name + "]", this.tbEvents)[0];
    };

    AttendeeEditor.prototype.getEventIdFromEvent = function(event) {
      var target;
      target = event.target;
      return target.getAttribute('eventId');
    };

    return AttendeeEditor;

  })();

  window.onload = function() {
    var editorData;
    editorData = JSON.parse(sessionStorage.attendeeEditorData);
    return window.editor = new AttendeeEditor(editorData.id);
  };

}).call(this);
